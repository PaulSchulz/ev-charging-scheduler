* Electric Vehicle Charging Scheduler

** Contents :TOC:
- [[#electric-vehicle-charging-scheduler][Electric Vehicle Charging Scheduler]]
  - [[#introduction][Introduction]]
  - [[#ev-charging-scheduling-problem][EV Charging Scheduling Problem]]
  - [[#scheduling-algorithms][Scheduling Algorithms]]
  - [[#development][Development]]

** Introduction
*---WORK IN PROGRESS---*

The problem: This software is part of a project for an EV charging controller
that allows multiple EVs to share charging across a number of charge points
which can draw more power than the underlying power circuit can supply.

The proposal is to schedule the time that each vehicle is charged, and then
charge each vehicle in turn as scheduled.

*** Dining Philosopher Problem
This problem is similar to the classical "dining philosopher" problem, except
that the chopsticks are shared from a pool that everyone uses.

*Note:* This code uses threads and a mutex for concurrent execution. This is more
complicated then the way this code will currently work. This may change in the
future if more control is implemented in the charge point. eg OCPP.

The code in 'dining.c' was created with the help of AI. There are numerous
other examples available on the internet.

Number of diners: 5 (N)

Features/Characteristics
- Uses semaphores to give mutually exclusive access to 'chopstick'.
- Uses a thread for each philosopher.
- Thread loops through each philosophers actions.
- Global lock before checking if available to eat,
  (diner on left and right not eating).
  
Functions/Process
- test
- take_fork
- put_fork
- philosopher
  - loop for each philosopher
    - wait for mutex
    - test that neighbours are not eating
      - take_fork (and eat)
    - release mutex
    - put_fork
- main

To build:
#+begin_src shell
  make diners
#+end_src

** EV Charging Scheduling Problem
Number of charge points: 4

** Scheduling Algorithms
*** Round Robin (simplest)
For 2 points out of N:
- Turn on 2 charge points, and wait charging interval
- Turn off charge points
- Repeat with next two charge points

Pros
- Simple, easily understandable charging schedule.

Cons
- Inefficient if charge points are not fully occupied.
- Inefficient if EV connected out-of-sequence.
  
** Development
Required packages in Unbuntu
- build-essential
- git
  

